# Python package
# Create and test a Python package on multiple Python versions.
# Add steps that analyze code, save the dist with the build record, publish to a PyPI-compatible index, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/python

trigger:
- master

pool:
  vmImage: 'vs2017-win2016'
strategy:
  matrix:
    # Python27:
    #   python.version: '2.7'
    Python37:
      python.version: '3.7'
      gdal_bin: "release-1911-x64-gdal-2-3-0-mapserver-7-0-7.zip"
      gdal_libs: "release-1911-x64-gdal-2-3-0-mapserver-7-0-7-libs.zip"

steps:
- task: UsePythonVersion@0
  inputs:
    versionSpec: '$(python.version)'
  displayName: 'Use Python $(python.version)'

- powershell: |
    Invoke-WebRequest http://download.gisinternals.com/sdk/downloads/$(gdal_bin) -OutFile gdalbin.zip
    Expand-Archive -Path gdalbin.zip -DestinationPath C:\gdal
    Invoke-WebRequest http://download.gisinternals.com/sdk/downloads/$(gdal_libs) -OutFile gdallibs.zip
    Expand-Archive -Path gdallibs.zip -DestinationPath C:\gdal

    # Prepend GDAL to the PATH
    $Env:PATH = "C:\\gdal;C:\\gdal\\bin;C:\\gdal\\data;C:\\gdal\\bin\\gdal\\apps;" + $Env:PATH

    # copy gisinternal gdal librarys into .libs
    xcopy C:\gdal\bin\*.dll fiona\.libs\
    xcopy C:\gdal\*.rtf fiona\.libs\licenses\

    python -m pip install --upgrade pip
    python -m pip install -r requirements-dev.txt
    python setup.py build_ext -IC:\\gdal\\include -lgdal_i -LC:\\gdal\\lib --gdalversion 2.3.0 develop

    #pip install dist\Fiona-1.8.6-cp37-cp37m-win_amd64.whl
    #move fiona fiona.build

    python -m pytest -m "not iconv and not wheel"

  env:
    GDAL_DATA: "C:\\gdal\\bin\\gdal-data"
    PACKAGE_DATA: "1"  # Include GDAL libs in the wheel

  displayName: 'Install dependencies'

# - script: |
#     pip install --upgrade pytest pytest-azurepipelines
#     python -m pytest -m \"not iconv and not wheel\" --cov fiona --cov-report term-missing
#   displayName: 'pytest'
